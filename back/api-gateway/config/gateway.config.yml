http:
  port: 8080

admin:
  port: 9876
  host: localhost

apiEndpoints:
  devices-api:
    paths:
      - "/devices"
      - "/devices/*"
  feedbacks-api:
    paths:
      - "/feedbacks"
      - "/feedbacks/*"
  healthchecks-api:
    paths:
      - "/healthchecks"
      - "/healthchecks/*"
  notifications-api:
    paths:
      - "/notifications"
      - "/notifications/*"
  users-api:
    paths:
      - "/users"
      - "/users/*"
  auth-api:
    paths: "/auth/*"

serviceEndpoints:
  devices:
    url: "http://devices-service:3000"
  feedbacks:
    url: "http://feedbacks-service:3000"
  healthchecks:
    url: "http://healthchecks-service:3000"
  notifications:
    url: "http://notifications-service:3000"
  users:
    url: "http://users-service:3000"
  auth:
    url: "http://auth-service:3000"

policies:
  - log
  - proxy
  - auth
  - cors

pipelines:
  devices-pipelines:
    apiEndpoints:
      - devices-api
    policies:
      - cors:
          action:
            origin: "*"
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
            headers: ["Authorization", "Content-Type"]
      - auth:
          action:
            roles: [ 1, 2 ]
      - log:
          action:
            message: "Requête vers /devices"
            checkCredentialExistence: false

      - proxy:
          action:
            serviceEndpoint: devices
            changeOrigin: true

  feedbacks-pipelines:
    apiEndpoints:
      - feedbacks-api
    policies:
      - cors:
          action:
            origin: "*"
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
            headers: ["Authorization", "Content-Type"]
      - log:
          action:
            message: "Requête vers /feedbacks"
      - proxy:
          action:
            serviceEndpoint: feedbacks
            changeOrigin: true

  healthchecks-pipelines:
    apiEndpoints:
      - healthchecks-api
    policies:
      - cors:
          action:
            origin: "*"
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
            headers: ["Authorization", "Content-Type"]
      - log:
          action:
            message: "Requête vers /healthchecks"
      - proxy:
          action:
            serviceEndpoint: healthchecks
            changeOrigin: true

  notifications-pipelines:
    apiEndpoints:
      - notifications-api
    policies:
      - cors:
          action:
            origin: "*"
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
            headers: ["Authorization", "Content-Type"]
      - log:
          action:
            message: "Requête vers /notifications"
      - proxy:
          action:
            serviceEndpoint: notifications
            changeOrigin: true

  users-pipelines:
    apiEndpoints:
      - users-api
    policies:
      - cors:
          action:
            origin: "*"
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
            headers: ["Authorization", "Content-Type"]
      - log:
          action:
            message: "Requête vers /users"
      - proxy:
          action:
            serviceEndpoint: users
            changeOrigin: true

  auth-pipelines:
    apiEndpoints:
      - auth-api
    policies:
      - cors:
          action:
            origin: "*"
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
            headers: ["Authorization", "Content-Type"]
      - log:
          action:
            message: "Requête vers /auth"
      - proxy:
          action:
            serviceEndpoint: auth
            changeOrigin: true
